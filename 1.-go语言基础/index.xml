<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>1. go语言基础s on devops</title>
    <link>https://example.com/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in 1. go语言基础s on devops</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://example.com/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://example.com/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/1.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/1.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>基本数据类型#布尔类型#数字类型#在计算机语言中，都是使用0和1表示的
   数字类型 类型和描述 特殊类型及用处     int8 有符号 8 位整型 (-128 到 127)    int16 有符号 16 位整型 (-32768 到 32767) 也是特殊类型rune   int32 有符号 32 位整型 (-2147483648 到 2147483647)    int64 有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)    uint8 无符号 8 位整型 (0 到 255) 也是特殊类型byte   uint16 无符号 16 位整型 (0 到 65535)    unit32 无符号 32 位整型 (0 到 4294967295)    uint64 无符号 64 位整型 (0 到 18446744073709551615)     高级一点的数据类型</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.com/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/10.new%E5%92%8Cmake/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/10.new%E5%92%8Cmake/</guid>
      <description>new和make的区别#值类型和引用类型#1. 什么是值类型，什么是引用类型？为什么要定义值类型，以及为什么要定义引用类型，以及值类型和引用类型的区别？#主要是为了方便内存的管理，防止内存空间泄露因为值类型再怎么定义，内存总是有限的，而引用类型有可能稍不注意就引发内存溢出。对于值类型的变量,我们不需要为它分配内存空间,是因为系统已经默认帮我们分配好了内存空间，对于引用类型的变量,我们不仅要声明变量,还要为它分配内存空间。值类型和引用类型的区别首先go语言的变量分为两种类型，一种是值类型，一种是引用类型。
为什么要区分值类型和引用类型呢?
为什么要使用new和make
变量的声明过程中new和make的区别，new和make是go语言内置的两个函数，也就是说是拿来就可以使用的函数，主要用来为变量创建内存空间。
值类型的变量: bool,int, float , string ,array,struct 引用类型的变量: slice切片 map 指针 interface channel 类型展示：
   类型 变量类型 零值 为什么是值类型,以及为什么是引用了类型的原因     值类型 bool false     int 0     float 0     string &amp;quot;&amp;quot;     array      struct {}    引用类型 slice nil     map nil     ptr指针 nil     channel nil     interface nil     引用类型的声明和定义#make和new都是go语言内建的两个函数，这两个函数都是在src\builtin\builtin.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.com/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/3.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/3.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid>
      <description>for循环#go语言的for循环有3种形式
 和c的for一样  for{} for condition{}
    最常用的几种形式
  for key,value := range map{ } </description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.com/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/5.%E6%95%B0%E7%BB%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/5.%E6%95%B0%E7%BB%84/</guid>
      <description>数组#数组#数组是同一种数据类型的元素的集合，
var 数组名 [3]int
数组的初始化#数组数据的访问#数组的遍历#数组的遍历有两种方法:
方法一: for循环遍历
for i:= 0; i&amp;lt; len(a); i++ {fmt.Println(i)fmt.Println(a[i])}方法二：for &amp;hellip; range遍历
for index,value := range a {fmt.Println(index)fmt.Println(value)}</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.com/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/6.%E5%88%87%E7%89%87/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/6.%E5%88%87%E7%89%87/</guid>
      <description>切片#切片#go预言切片是对数组的抽象，go语言数组的长度是不可改变的，在特定场景中这样的集合就不太适用，
切片的定义#切片的声明#var sliceName []sliceType注: sliceName表示要声明的切片的名称sliceType表示切片中要存储的数据类型。举例:1.声明一个存放var a []int2.声明存放一个string字符串类型的切片var a []string切片的初始化#切片的容量和长度#切片的内置方法
 len() cap() append() copy()  向切片中添加一个或多个数据
向切片中添加一个或多个数据可以使用go语言内建的append()的函数,该函数可以为切片动态添加元素，可以一次添加一个元素,也可以一次添加多个元素, var a []int a = append(a,1) a = append(a,1,2,3) 读取切片中的值#读取切片中的值
func main() {s := []int{1, 3, 5}for i := 0; i &amp;lt; len(s); i++ {fmt.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.com/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/7.map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/7.map/</guid>
      <description>map#map的初始化
map需要使用make来进行初始化，不能使用new进行初始化。删除map中的值
delete(map,key)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.com/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/8.%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/8.%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>struct结构体#结构体数组#结构体数组是我们
常见的使用方法#1.结构体与各种数据的映射，包括直接映射为json数据，配置文件映射，作为数据配置和解析的
2.结构体和数据库对象的映射
3.
4.结构体作为对象进行实例化
1. 结构体实例化#4.与配置文件映射，比如json，yaml等#</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.com/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/9.init%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/9.init%E5%87%BD%E6%95%B0/</guid>
      <description>init函数
go语言中有一个特殊的函数，init函数，这个init函数是go编译器自动识别的，用于一些初始化的工作，init函数
init函数常见的使用场景#定义一个全局变量当我们在使用数据库或日志函数的时候，经常需要定义一个全局变量来进行初始化
定义一个全局变量#除了前面我们提到的，我们可以使用init函数来执行一些列的初始化操作，完成一系列的初始化任务，
1.同一个包中的init函数
当同一个包中需要一个实例化的变量的时候2.引入一个公共包中的init函数的时候
公共的包中需要定义一个</description>
    </item>
    
    <item>
      <title>first</title>
      <link>https://example.com/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/2.%E5%8F%98%E9%87%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/2.%E5%8F%98%E9%87%8F/</guid>
      <description>变量的声明</description>
    </item>
    
  </channel>
</rss>
