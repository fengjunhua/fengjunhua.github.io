'use strict';(function(){const b={cache:!0};b.doc={id:'id',field:['title','content'],store:['title','href','section']};const a=FlexSearch.create('balance',b);window.bookSearchIndex=a,a.add({id:0,href:'/go/example/',title:"go语言基础教程",section:"Goes",content:"变量\r#\r\r循环\r#\r\r"}),a.add({id:1,href:'/go/example/table-of-contents/with-toc/',title:"With ToC",section:"Table of Contents",content:"Caput vino delphine in tamen vias\r#\r\rCognita laeva illo fracta\r#\r\rLorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\n Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit  Natus quaerere\r#\r\rPectora et sine mulcere, coniuge dum tincta incurvae. Quis iam; est dextra Peneosque, metuis a verba, primo. Illa sed colloque suis: magno: gramen, aera excutiunt concipit.\n Phrygiae petendo suisque extimuit, super, pars quod audet! Turba negarem. Fuerat attonitus; et dextra retinet sidera ulnas undas instimulat vacuae generis? Agnus dabat et ignotis dextera, sic tibi pacis feriente at mora euhoeque comites hostem vestras Phineus. Vultuque sanguine dominoque metuit risi fama vergit summaque meus clarissimus artesque tinguebat successor nominis cervice caelicolae.\n Limitibus misere sit\r#\r\rAurea non fata repertis praerupit feruntur simul, meae hosti lentaque citius levibus, cum sede dixit, Phaethon texta. Albentibus summos multifidasque iungitur loquendi an pectore, mihi ursaque omnia adfata, aeno parvumque in animi perlucentes. Epytus agis ait vixque clamat ornum adversam spondet, quid sceptra ipsum est. Reseret nec; saeva suo passu debentia linguam terga et aures et cervix de ubera. Coercet gelidumque manus, doluit volvitur induta?\nEnim sua\r#\r\rIuvenilior filia inlustre templa quidem herbis permittat trahens huic. In cruribus proceres sole crescitque fata, quos quos; merui maris se non tamen in, mea.\nGermana aves pignus tecta\r#\r\rMortalia rudibusque caelum cognosceret tantum aquis redito felicior texit, nec, aris parvo acre. Me parum contulerant multi tenentem, gratissime suis; vultum tu occupat deficeret corpora, sonum. E Actaea inplevit Phinea concepit nomenque potest sanguine captam nulla et, in duxisses campis non; mercede. Dicere cur Leucothoen obitum?\nPostibus mittam est nubibus principium pluma, exsecratur facta et. Iunge Mnemonidas pallamque pars; vere restitit alis flumina quae quoque, est ignara infestus Pyrrha. Di ducis terris maculatum At sede praemia manes nullaque!\n"}),a.add({id:2,href:'/go/example/table-of-contents/without-toc/',title:"Without ToC",section:"Table of Contents",content:"At me ipso nepotibus nunc celebratior genus\r#\r\rTanto oblite\r#\r\rLorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.\nQuam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque. Exul Laurenti orantem modo, per densum missisque labor manibus non colla unum, obiectat. Tu pervia collo, fessus quae Cretenque Myconon crate! Tegumenque quae invisi sudore per vocari quaque plus ventis fluidos. Nodo perque, fugisse pectora sorores.\nSumme promissa supple vadit lenius\r#\r\rQuibus largis latebris aethera versato est, ait sentiat faciemque. Aequata alis nec Caeneus exululat inclite corpus est, ire tibi ostendens et tibi. Rigent et vires dique possent lumina; eadem dixit poma funeribus paret et felix reddebant ventis utile lignum.\n Remansit notam Stygia feroxque Et dabit materna Vipereas Phrygiaeque umbram sollicito cruore conlucere suus Quarum Elis corniger Nec ieiunia dixit  Vertitur mos ortu ramosam contudit dumque; placabat ac lumen. Coniunx Amoris spatium poenamque cavernis Thebae Pleiadasque ponunt, rapiare cum quae parum nimium rima.\nQuidem resupinus inducto solebat una facinus quae\r#\r\rCredulitas iniqua praepetibus paruit prospexit, voce poena, sub rupit sinuatur, quin suum ventorumque arcadiae priori. Soporiferam erat formamque, fecit, invergens, nymphae mutat fessas ait finge.\n Baculum mandataque ne addere capiti violentior Altera duas quam hoc ille tenues inquit Sicula sidereus latrantis domoque ratae polluit comites Possit oro clausura namque se nunc iuvenisque Faciem posuit Quodque cum ponunt novercae nata vestrae aratra  Ite extrema Phrygiis, patre dentibus, tonso perculit, enim blanda, manibus fide quos caput armis, posse! Nocendo fas Alcyonae lacertis structa ferarum manus fulmen dubius, saxa caelum effuge extremis fixum tumor adfecit bella, potentes? Dum nec insidiosa tempora tegit spirarunt. Per lupi pars foliis, porreximus humum negant sunt subposuere Sidone steterant auro. Memoraverit sine: ferrum idem Orion caelum heres gerebat fixis?\n"}),a.add({id:3,href:'/posts/creating-a-new-theme/',title:"Creating a New Theme",section:"Blog",content:"Introduction\r#\r\rThis tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment\r$ echo this is a command\rthis is a command\r## edit the file\r$ vi foo.md\r+++\rdate = \u0026quot;2014-09-28\u0026quot;\rtitle = \u0026quot;creating a new theme\u0026quot;\r+++\rbah and humbug\r:wq\r## show it\r$ cat foo.md\r+++\rdate = \u0026quot;2014-09-28\u0026quot;\rtitle = \u0026quot;creating a new theme\u0026quot;\r+++\rbah and humbug\r$\rSome Definitions\r#\r\rThere are a few concepts that you need to understand before creating a theme.\nSkins\r#\r\rSkins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page\r#\r\rThe home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File\r#\r\rWhen Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent\r#\r\rContent is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter\r#\r\rThe front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown\r#\r\rContent is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files\r#\r\rHugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template\r#\r\rA single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template\r#\r\rA list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template\r#\r\rA partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site\r#\r\rLet\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta\r$ cd ~/Sites/zafta\r$ ls -l\rtotal 8\rdrwxr-xr-x 7 quoha staff 238 Sep 29 16:49 .\rdrwxr-xr-x 3 quoha staff 102 Sep 29 16:49 ..\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes\r-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static\r$\rTake a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site\r#\r\rRunning the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose\rINFO: 2014/09/29 Using config file: config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\rWARN: 2014/09/29 Unable to locate layout: [404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\r$ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l\rtotal 8\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes\r-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static\r$\rSee that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public\rtotal 16\r-rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml\r-rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml\r$ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site\r#\r\rVerify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\rWARN: 2014/09/29 Unable to locate layout: [404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\rServing pages from /Users/quoha/Sites/zafta/public\rWeb Server is available at http://localhost:1313\rPress Ctrl+C to stop\rConnect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml\rsitemap.xml\rThat\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\rWARN: 2014/09/29 Unable to locate layout: [404.html]\rThat second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme\r#\r\rHugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton\r#\r\rUse the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta\r$ ls -l\rtotal 8\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes\r-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static\rdrwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes\r$ find themes -type f | xargs ls -l\r-rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html\r-rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml\r$ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml\rauthor = \u0026quot;michael d henderson\u0026quot;\rdescription = \u0026quot;a minimal working template\u0026quot;\rlicense = \u0026quot;MIT\u0026quot;\rname = \u0026quot;zafta\u0026quot;\rsource_repo = \u0026quot;\u0026quot;\rtags = [\u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot;]\r:wq\r## also edit themes/zafta/LICENSE.md and change\r## the bit that says \u0026quot;YOUR_NAME_HERE\u0026quot;\rNote that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name '*.html' | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html\r$\rUpdate the Configuration File to Use the Theme\r#\r\rNow that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml\rtheme = \u0026quot;zafta\u0026quot;\rbaseurl = \u0026quot;\u0026quot;\rlanguageCode = \u0026quot;en-us\u0026quot;\rtitle = \u0026quot;zafta - totally refreshing\u0026quot;\rMetaDataFormat = \u0026quot;toml\u0026quot;\r:wq\r$\rGenerate the Site\r#\r\rNow that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\r$\rDid you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public\rtotal 16\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html\r-rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js\r-rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml\r$\rNotice four things:\n Hugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically.  The Home Page\r#\r\rHugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\rIf it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html\r$ The Magic of Static\r#\r\rHugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld\rdrwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta\rdrwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes\rdrwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js\r$ The Theme Development Cycle\r#\r\rWhen you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\n Purge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4.  I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory\r#\r\rWhen generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option\r#\r\rHugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload\r#\r\rHugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands\r#\r\rUse the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory.\r##\r$ rm -rf public\r##\r## run hugo in watch mode\r##\r$ hugo server --watch --verbose\rHere\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public\r$ hugo server --watch --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\rWatching for changes in /Users/quoha/Sites/zafta/content\rServing pages from /Users/quoha/Sites/zafta/public\rWeb Server is available at http://localhost:1313\rPress Ctrl+C to stop\rINFO: 2014/09/29 File System Event: [\u0026quot;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026quot;: MODIFY|ATTRIB]\rChange detected, rebuilding site\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 1 ms\rUpdate the Home Page Template\r#\r\rThe home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\n index.html _default/list.html _default/single.html  We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page\r#\r\rRight now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html\r\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq\r$\rBuild the web site and then verify the results.\n$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\r$ find public -type f -name '*.html' | xargs ls -l\r-rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html\r$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt;\rLive Reload\r#\r\rNote: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/' + 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\rWhen you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page\r#\r\r\u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts\r#\r\rNow that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 attempting to create post/first.md of post\rINFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md\rERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{}\r$ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md\r+++\rDescription = \u0026quot;\u0026quot;\rTags = []\rCategories = []\r+++\r:wq\r$ find themes/zafta/archetypes -type f | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md\r-rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md\r$ hugo --verbose new post/first.md\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 attempting to create post/first.md of post\rINFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md\rINFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md\r/Users/quoha/Sites/zafta/content/post/first.md created\r$ hugo --verbose new post/second.md\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 attempting to create post/second.md of post\rINFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md\rINFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md\r/Users/quoha/Sites/zafta/content/post/second.md created\r$ ls -l content/post\rtotal 16\r-rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md\r-rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md\r$ cat content/post/first.md +++\rCategories = []\rDescription = \u0026quot;\u0026quot;\rTags = []\rdate = \u0026quot;2014-09-29T21:54:53-05:00\u0026quot;\rtitle = \u0026quot;first\u0026quot;\r+++\rmy first post\r$ cat content/post/second.md +++\rCategories = []\rDescription = \u0026quot;\u0026quot;\rTags = []\rdate = \u0026quot;2014-09-29T21:57:09-05:00\u0026quot;\rtitle = \u0026quot;second\u0026quot;\r+++\rmy second post\r$ Build the web site and then verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;, \u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$\rThe output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name '*.html' | xargs ls -l\r-rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html\r$\rThe new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates\r#\r\rIn Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage\r#\r\rThe home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r{{ range first 10 .Data.Pages }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ end }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq\r$\rHugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\n range .Title end  The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html\r$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$\rCongratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts\r#\r\rWe\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l\r-rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html\rWe could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File\r#\r\r$ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ .Content }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq\r$\rBuild the web site and verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$ find public -type f -name '*.html' | xargs ls -l\r-rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html\r-rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html\r-rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html\r$ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$\rNotice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content\r#\r\rThe posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r{{ range first 10 .Data.Pages }}\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r{{ end }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rBuild the web site and verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$ find public -type f -name '*.html' | xargs ls -l\r-rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html\r-rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html\r-rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html\r$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/second/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/first/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$\rCreate a Post Listing\r#\r\rWe have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html\rAs with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages\r#\r\rLet\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++\rtitle = \u0026quot;about\u0026quot;\rdescription = \u0026quot;about this site\u0026quot;\rdate = \u0026quot;2014-09-27\u0026quot;\rslug = \u0026quot;about time\u0026quot;\r+++\r## about us\ri'm speechless\r:wq\rGenerate the web site and verify the results.\n$ find public -name '*.html' | xargs ls -l\r-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html\r-rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html\r-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html\r-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html\r-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html\rNotice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/theme/\u0026quot;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/about-time/\u0026quot;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/second-post/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/first-post/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://'\r+ (location.host || 'localhost').split(':')[0]\r+ ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/'\r+ 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rNotice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt;\r{{ range first 10 .Data.Pages }}\r{{ if eq .Type \u0026quot;post\u0026quot;}}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r\u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt;\r{{ range .Data.Pages }}\r{{ if eq .Type \u0026quot;page\u0026quot; }}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq\rGenerate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name '*.html' | xargs ls -l\r-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html\r-rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html\r-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html\r-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html\r-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html\rKnowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml\r[permalinks]\rpage = \u0026quot;/:title/\u0026quot;\rabout = \u0026quot;/:filename/\u0026quot;\rGenerate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates\r#\r\rIf you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials\r#\r\rIn Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r:wq\r$ vi themes/zafta/layouts/partials/footer.html\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq\rUpdate the Home Page Template to Use the Partials\r#\r\rThe most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026quot;theme/partials/header.html\u0026quot; . }}\rversus\n{{ partial \u0026quot;header.html\u0026quot; . }}\rBoth pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html\r{{ partial \u0026quot;header.html\u0026quot; . }}\r\u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt;\r{{ range first 10 .Data.Pages }}\r{{ if eq .Type \u0026quot;post\u0026quot;}}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r\u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt;\r{{ range .Data.Pages }}\r{{ if or (eq .Type \u0026quot;page\u0026quot;) (eq .Type \u0026quot;about\u0026quot;) }}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r{{ partial \u0026quot;footer.html\u0026quot; . }}\r:wq\rGenerate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials\r#\r\r$ vi themes/zafta/layouts/_default/single.html\r{{ partial \u0026quot;header.html\u0026quot; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ .Content }}\r{{ partial \u0026quot;footer.html\u0026quot; . }}\r:wq\rGenerate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts\r#\r\rIt\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template\r#\r\rWe\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\rPosts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html\r{{ partial \u0026quot;header.html\u0026quot; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r\u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt;\r{{ .Content }}\r{{ partial \u0026quot;footer.html\u0026quot; . }}\r:wq\rGenerate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post\r$ vi themes/zafta/layouts/_default/single.html\r{{ partial \u0026quot;header.html\u0026quot; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ .Content }}\r{{ partial \u0026quot;footer.html\u0026quot; . }}\r:wq\rNow we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html\r{{ partial \u0026quot;header.html\u0026quot; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r\u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt;\r{{ .Content }}\r{{ partial \u0026quot;footer.html\u0026quot; . }}\r:wq\rNote that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself\r#\r\rDRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"}),a.add({id:4,href:'/posts/migrate-from-jekyll/',title:"Migrate to Hugo from Jekyll",section:"Blog",content:"Move static content to static\r#\r\rJekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/\r▾ images/\rlogo.png\r should become\n▾ \u0026lt;root\u0026gt;/\r▾ static/\r▾ images/\rlogo.png\r Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file\r#\r\rHugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site\r#\r\rThe default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\n  Change your submodule to point to map gh-pages to public instead of _site (recommended).\n git submodule deinit _site\rgit rm _site\rgit submodule add -b gh-pages git@github.com:your-username/your-repo.git public\r   Or, change the Hugo configuration to use _site instead of public.\n {\r..\r\u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;,\r..\r}\r   Convert Jekyll templates to Hugo templates\r#\r\rThat\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes\r#\r\rJekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation\r#\r\rAs an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll\rclass ImageTag \u0026lt; Liquid::Tag\r@url = nil\r@caption = nil\r@class = nil\r@link = nil\r// Patterns\rIMAGE_URL_WITH_CLASS_AND_CAPTION =\rIMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i\rIMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i\rIMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i\rIMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i\rdef initialize(tag_name, markup, tokens)\rsuper\rif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK\r@class = $1\r@url = $3\r@caption = $7\r@link = $9\relsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION\r@class = $1\r@url = $3\r@caption = $7\relsif markup =~ IMAGE_URL_WITH_CAPTION\r@url = $1\r@caption = $5\relsif markup =~ IMAGE_URL_WITH_CLASS\r@class = $1\r@url = $3\relsif markup =~ IMAGE_URL\r@url = $1\rend\rend\rdef render(context)\rif @class\rsource = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot;\relse\rsource = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot;\rend\rif @link\rsource += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot;\rend\rsource += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot;\rif @link\rsource += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot;\rend\rsource += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption\rsource += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot;\rsource\rend\rend\rend\rLiquid::Template.register_tag('image', Jekyll::ImageTag)\r is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt;\r\u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt;\r{{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }}\r\u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt;\r{{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }}\r{{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}}\r\u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }}\r{{ .Get \u0026quot;title\u0026quot; }}{{ end }}\r{{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt;\r{{ .Get \u0026quot;caption\u0026quot; }}\r{{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }}\r{{ .Get \u0026quot;attr\u0026quot; }}\r{{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }}\r\u0026lt;/p\u0026gt; {{ end }}\r\u0026lt;/figcaption\u0026gt;\r{{ end }}\r\u0026lt;/figure\u0026gt;\r\u0026lt;!-- image --\u0026gt;\r Usage\r#\r\rI simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}\r to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}}\r As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches\r#\r\rFix content\r#\r\rDepending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up\r#\r\rYou\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff\r#\r\r\rHey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"}),a.add({id:5,href:'/go/example/table-of-contents/',title:"Table of Contents",section:"go语言基础教程",content:"Ubi loqui\r#\r\rMentem genus facietque salire tempus bracchia\r#\r\rLorem markdownum partu paterno Achillem. Habent amne generosi aderant ad pellem nec erat sustinet merces columque haec et, dixit minus nutrit accipiam subibis subdidit. Temeraria servatum agros qui sed fulva facta. Primum ultima, dedit, suo quisque linguae medentes fixo: tum petis.\nRapit vocant si hunc siste adspice\r#\r\rOra precari Patraeque Neptunia, dixit Danae Cithaeron armaque maxima in nati Coniugis templis fluidove. Effugit usus nec ingreditur agmen ac manus conlato. Nullis vagis nequiquam vultibus aliquos altera suum venis teneas fretum. Armos remotis hoc sine ferrea iuncta quam!\nLocus fuit caecis\r#\r\rNefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral),\rnorthbridge_services_troubleshooting, personal(\rfirmware_rw.trash_rw_crm.device(interactive_gopher_personal,\rsoftware, -1), megabit, ergonomicsSoftware(cmyk_usb_panel,\rmips_whitelist_duplex, cpa)));\rif (5) {\rmanagementNetwork += dma - boolean;\rkilohertz_token = 2;\rhoneypot_affiliate_ergonomics = fiber;\r}\rmouseNorthbridge = byte(nybble_xmp_modem.horse_subnet(\ranalogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet),\rgateway_ospf), repository.domain_key.mouse(serverData(fileNetwork,\rtrim_duplex_file), cellTapeDirect, token_tooltip_mashup(\rripcordingMashup)));\rmodule_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) +\rcoreLog.joystick(componentUdpLink), windows_expansion_touchscreen);\rbashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling(\rciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);\r Placabilis coactis nega ingemuit ignoscat nimia non\r#\r\rFrontis turba. Oculi gravis est Delphice; inque praedaque sanguine manu non.\nif (ad_api) {\rzif += usb.tiffAvatarRate(subnet, digital_rt) + exploitDrive;\rgigaflops(2 - bluetooth, edi_asp_memory.gopher(queryCursor, laptop),\rpanel_point_firmware);\rspyware_bash.statePopApplet = express_netbios_digital(\rinsertion_troubleshooting.brouter(recordFolderUs), 65);\r}\rrecursionCoreRay = -5;\rif (hub == non) {\rportBoxVirus = soundWeb(recursive_card(rwTechnologyLeopard),\rfont_radcab, guidCmsScalable + reciprocalMatrixPim);\rleft.bug = screenshot;\r} else {\rtooltipOpacity = raw_process_permalink(webcamFontUser, -1);\rexecutable_router += tape;\r}\rif (tft) {\rbandwidthWeb *= social_page;\r} else {\rregular += 611883;\rthumbnail /= system_lag_keyboard;\r}\r Caesorum illa tu sentit micat vestes papyriferi\r#\r\rInde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"}),a.add({id:6,href:'/posts/goisforlovers/',title:"(Hu)go Template Primer",section:"Blog",content:"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates\r#\r\rGo templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax\r#\r\rGolang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }}\r Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }}\r Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }}\r Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }}\r Variables\r#\r\rEach Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;\r Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}}\r{{ $address }}\r Functions\r#\r\rGo template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }}\r Includes\r#\r\rWhen including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }}\r Logic\r#\r\rGo templates provide the most basic iteration and conditional logic.\nIteration\r#\r\rJust like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }}\r{{ . }}\r{{ end }}\r Example 2: Declaring value variable name\n{{range $element := array}}\r{{ $element }}\r{{ end }}\r Example 2: Declaring key and value variable name\n{{range $index, $element := array}}\r{{ $index }}\r{{ $element }}\r{{ end }}\r Conditionals\r#\r\rIf, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\n false 0 any array, slice, map, or string of length zero  Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }}\r Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }}\r{{ index .Params \u0026quot;alt\u0026quot; }}\r{{else}}\r{{ index .Params \u0026quot;caption\u0026quot; }}\r{{ end }}\r Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}\r Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }}\r Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }}\r{{ index .Params \u0026quot;alt\u0026quot; }}\r{{ else if isset .Params \u0026quot;caption\u0026quot; }}\r{{ index .Params \u0026quot;caption\u0026quot; }}\r{{ end }}\r Pipes\r#\r\rOne of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }}\r is the same as\n{{ eq 1 1 | if }} Same {{ end }}\r It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }}\r Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}\rStuff Here\r{{ end }}\r Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }}\rStuff Here\r{{ end }}\r Context (aka. the dot)\r#\r\rThe most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n {{ $title := .Site.Title }}\r{{ range .Params.tags }}\r\u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt;\r{{ end }}\r Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters\r#\r\rHugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters\r#\r\rIn each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n---\rtitle: \u0026quot;Permalinks\u0026quot;\rdate: \u0026quot;2013-11-18\u0026quot;\raliases:\r- \u0026quot;/doc/permalinks/\u0026quot;\rgroups: [\u0026quot;extras\u0026quot;]\rgroups_weight: 30\rnotoc: true\r---\rHere is the corresponding code inside of the template:\n {{ if not .Params.notoc }}\r\u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt;\r{{ .TableOfContents }}\r\u0026lt;/div\u0026gt;\r{{ end }}\r Using Site (config) Parameters\r#\r\rIn your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34; TwitterUser: \u0026#34;spf13\u0026#34; SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt;\r\u0026lt;div class=\u0026quot;text-center\u0026quot;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt;\r\u0026lt;/footer\u0026gt;{{end}}\rAn alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026quot;twitter\u0026quot;\u0026gt;\r\u0026lt;a href=\u0026quot;https://twitter.com/{{.}}\u0026quot; rel=\u0026quot;author\u0026quot;\u0026gt;\r\u0026lt;img src=\u0026quot;/images/twitter.png\u0026quot; width=\u0026quot;48\u0026quot; height=\u0026quot;48\u0026quot; title=\u0026quot;Twitter: {{.}}\u0026quot;\ralt=\u0026quot;Twitter\u0026quot;\u0026gt;\u0026lt;/a\u0026gt;\r\u0026lt;/span\u0026gt;{{end}}\rFinally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026quot;recent\u0026quot;\u0026gt;\r\u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt;\r\u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}\r\u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{{.RelPermalink}}\u0026quot;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r{{end}}\u0026lt;/ul\u0026gt;\r\u0026lt;/nav\u0026gt;\r"}),a.add({id:7,href:'/posts/hugoisforlovers/',title:"Getting Started with Hugo",section:"Blog",content:"Step 1. Install Hugo\r#\r\rGo to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs\r#\r\rHugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\n Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo\rcd hugo\r/path/to/where/you/installed/hugo server --source=./docs\r\u0026gt; 29 pages created\r\u0026gt; 0 tags index created\r\u0026gt; in 27 ms\r\u0026gt; Web Server is available at http://localhost:1313\r\u0026gt; Press ctrl+c to stop\r Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site\r#\r\rStop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch\r\u0026gt; 29 pages created\r\u0026gt; 0 tags index created\r\u0026gt; in 27 ms\r\u0026gt; Web Server is available at http://localhost:1313\r\u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content\r\u0026gt; Press ctrl+c to stop\r Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site\r\u0026gt; 29 pages created\r\u0026gt; 0 tags index created\r\u0026gt; in 26 ms\r Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun\r#\r\rThe best way to learn something is to play with it.\n"}),a.add({id:8,href:'/0.hugo%E6%95%99%E7%A8%8B%E6%96%87%E6%A1%A3/1.hugo%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%AE%89%E8%A3%85/',title:"1.Hugo简介及安装",section:"0.hugo教程文档s",content:"项目官网地址:\n创建各个层级的目录\nconfig目录\r#\r\rhugo附带了大量的配置指令,config目录是将这些配置指令存储为JSON,YAML和TOML文件的地方.每一个根设置对象都可以配置成单独的文件,并且可以根据具体的环境进行优化，比如开发环境，测试环境，生产环境等.当我们只需要一个简单的环境而不需要使用这么多的配置，并且也不需要配置多个环境的时候，我们可以使用一个root根目录下的一个单独的config.toml文件作为配置。 许多网站可能不需要什么配置，但Hugo提供了大量的配置指令，用于更精细地指导Hugo如何构建网站。注意：默认情况下不创建配置目录。 "}),a.add({id:9,href:'/0.hugo%E6%95%99%E7%A8%8B%E6%96%87%E6%A1%A3/2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/',title:"2.常用命令使用",section:"0.hugo教程文档s",content:"hugo是主要的命令，用来构建我们的网站\n使用方法\nhugo [flags] hugo [command] hugo [command] [flags] 常用的命令主要有:\nnew: server: config: 打印网站的配置 convert: 转换网站的content内容到不同的形式 deploy: 部署网站到云环境 env: 打印hugo的版本的环境变量 gen: help: import: list: mod: version: 常用的选项参数主要有:\n-b, --baseURL string -D, --buildDrafs\r创建一个新的网站\r#\r\rhugo new site \u0026lt;网站名字\u0026gt; 生成静态目录\r#\r\rhugo\r"}),a.add({id:10,href:'/0.hugo%E6%95%99%E7%A8%8B%E6%96%87%E6%A1%A3/3.%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/',title:"3.配置文件详解",section:"0.hugo教程文档s",content:"配置文件详解\n如何配置hugo网站呢?\n配置文件:\nhugo使用config.\n配置目录\r#\r\r除了使用单个站点配置文件外，还可以使用configDir目录（默认为config/）来维护更简单的组织和特定于环境的设置。\n1. 2.theme主题 dataDir = \u0026#34;\u0026#34; "}),a.add({id:11,href:'/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/1.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/',title:"1.基本数据结构",section:"1. go语言基础s",content:"基本数据类型\r#\r\r布尔类型\r#\r\r数字类型\r#\r\r在计算机语言中，都是使用0和1表示的\n   数字类型 类型和描述 特殊类型及用处     int8 有符号 8 位整型 (-128 到 127)    int16 有符号 16 位整型 (-32768 到 32767) 也是特殊类型rune   int32 有符号 32 位整型 (-2147483648 到 2147483647)    int64 有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)    uint8 无符号 8 位整型 (0 到 255) 也是特殊类型byte   uint16 无符号 16 位整型 (0 到 65535)    unit32 无符号 32 位整型 (0 到 4294967295)    uint64 无符号 64 位整型 (0 到 18446744073709551615)     高级一点的数据类型\nbyte\n[]byte\nBuffer\n再高级一点的数据类型,字符串数据类型\nstring\n派生类型\n指针类型（Pointer）\r数组类型\r结构化类型(struct)\rChannel 类型\r函数类型\r切片类型\r接口类型（interface）\rMap 类型\r"}),a.add({id:12,href:'/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/10.new%E5%92%8Cmake/',title:"10.New和make",section:"1. go语言基础s",content:"new和make的区别\r#\r\r值类型和引用类型\r#\r\r1. 什么是值类型，什么是引用类型？为什么要定义值类型，以及为什么要定义引用类型，以及值类型和引用类型的区别？\r#\r\r主要是为了方便内存的管理，防止内存空间泄露\r因为值类型再怎么定义，内存总是有限的，而引用类型有可能稍不注意就引发内存溢出。\r对于值类型的变量,我们不需要为它分配内存空间,是因为系统已经默认帮我们分配好了内存空间，\r对于引用类型的变量,我们不仅要声明变量,还要为它分配内存空间。\r值类型和引用类型的区别\r首先go语言的变量分为两种类型，一种是值类型，一种是引用类型。\n为什么要区分值类型和引用类型呢?\n为什么要使用new和make\n变量的声明过程中new和make的区别，new和make是go语言内置的两个函数，也就是说是拿来就可以使用的函数，主要用来为变量创建内存空间。\n值类型的变量: bool,int, float , string ,array,struct 引用类型的变量: slice切片 map 指针 interface channel 类型展示：\n   类型 变量类型 零值 为什么是值类型,以及为什么是引用了类型的原因     值类型 bool false     int 0     float 0     string \u0026quot;\u0026quot;     array      struct {}    引用类型 slice nil     map nil     ptr指针 nil     channel nil     interface nil     引用类型的声明和定义\r#\r\rmake和new都是go语言内建的两个函数，这两个函数都是在src\\builtin\\builtin.go目录中定义的，new和make都是在堆上分配内存，与make不同的是，new返回的是一个指针变量，并且可以为任何类型的变量分配地址，不仅仅是引用类型，也可以是值类型，而make仅能为slice，map和channel这三种类型分配地址并进行初始化。\n使用new创建一个引用类型的变量\r#\r\rgo语言官方对new函数的定义和解释，new是go语言内置的一个函数，用来为变量分配内存地址，new函数只有一个参数，这个参数是一个类型，而并不是一个具体的值，new函数的返回值是一个为该类型分配的一个零值的指针。\nfunc new(Type) *Type new(T)为类型T类型新值分配空间并将此空间初始化为 T 的零值，返回的是新值的地址，也就是 T 类型的指针 *T，该指针指向 T 的新分配的零值，它相当于\u0026amp;T{}。 使用new声明举例：\n1.创建一个切片\r2.创建一个map\r使用make创建一个引用类型的变量\r#\r\rgo语言对make函数的定义和解释，make函数仅仅是对slice，map，和channel这三种类型的变量进行内存分配和初始化的一个函数，make函数与new函数一样，第一个参数都是一个类型，而不是一个具体的值。make函数与new函数不同的是，new函数只有一个参数，而make函数有三个参数，make函数的第一个参数是所声明的类型名称，\nmake函数的返回值是一个变量，并不是一个指针，为参数分配的规格大小取决于具体的类型已经传递的参数变量。\nfunc make(t Type, size ...IntegerType) Type 函数分析: 对于slice切片类型的分配: 对于map类型的分配 make返回的是类型本身, make函数是无可替代的,当我们在使用slice切片,map,channel通道的时候,必须要使用make函数来进行初始化,然后我们才可以操作。\n1. 声明一个slice切片\r#\r\r使用make函数如果初始化的是一个切片，\n2. 声明一个map\r#\r\r3. 声明一个channel\r#\r\r1.创建一个切片\r2.创建一个map\r3. channel channel中有可能包含一个切片或map\r"}),a.add({id:13,href:'/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/3.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/',title:"3.流程控制",section:"1. go语言基础s",content:"for循环\r#\r\rgo语言的for循环有3种形式\n 和c的for一样  for{\r}\r for condition{}\n    最常用的几种形式\n  for key,value := range map{ } "}),a.add({id:14,href:'/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/5.%E6%95%B0%E7%BB%84/',title:"5.数组",section:"1. go语言基础s",content:"数组\r#\r\r数组\r#\r\r数组是同一种数据类型的元素的集合，\nvar 数组名 [3]int\n数组的初始化\r#\r\r数组数据的访问\r#\r\r数组的遍历\r#\r\r数组的遍历有两种方法:\n方法一: for循环遍历\nfor i:= 0; i\u0026lt; len(a); i++ {\rfmt.Println(i)\rfmt.Println(a[i])\r}\r方法二：for \u0026hellip; range遍历\nfor index,value := range a {\rfmt.Println(index)\rfmt.Println(value)\r}\r"}),a.add({id:15,href:'/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/6.%E5%88%87%E7%89%87/',title:"6.切片",section:"1. go语言基础s",content:"切片\r#\r\r切片\r#\r\rgo预言切片是对数组的抽象，go语言数组的长度是不可改变的，在特定场景中这样的集合就不太适用，\n切片的定义\r#\r\r切片的声明\r#\r\rvar sliceName []sliceType\r注: sliceName表示要声明的切片的名称\rsliceType表示切片中要存储的数据类型。\r举例:\r1.声明一个存放\rvar a []int\r2.声明存放一个string字符串类型的切片\rvar a []string\r切片的初始化\r#\r\r切片的容量和长度\r#\r\r切片的内置方法\n len() cap() append() copy()  向切片中添加一个或多个数据\n向切片中添加一个或多个数据可以使用go语言内建的append()的函数,该函数可以为切片动态添加元素，可以一次添加一个元素,也可以一次添加多个元素, var a []int a = append(a,1) a = append(a,1,2,3) 读取切片中的值\r#\r\r读取切片中的值\nfunc main() {\rs := []int{1, 3, 5}\rfor i := 0; i \u0026lt; len(s); i++ {\rfmt.Println(i, s[i])\r}\rfor index, value := range s {\rfmt.Println(index, value)\r}\r}\r读取切片中所有的值，采用循环遍历的方式:\n循环遍历切片\n"}),a.add({id:16,href:'/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/7.map/',title:"7.Map",section:"1. go语言基础s",content:"map\r#\r\rmap的初始化\nmap需要使用make来进行初始化，不能使用new进行初始化。\r删除map中的值\ndelete(map,key)\n"}),a.add({id:17,href:'/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/8.%E7%BB%93%E6%9E%84%E4%BD%93/',title:"8.结构体",section:"1. go语言基础s",content:"struct结构体\r#\r\r结构体数组\r#\r\r结构体数组是我们\n常见的使用方法\r#\r\r1.结构体与各种数据的映射，包括直接映射为json数据，配置文件映射，作为数据配置和解析的\n2.结构体和数据库对象的映射\n3.\n4.结构体作为对象进行实例化\n1. 结构体实例化\r#\r\r4.与配置文件映射，比如json，yaml等\r#\r\r"}),a.add({id:18,href:'/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/9.init%E5%87%BD%E6%95%B0/',title:"9.Init函数",section:"1. go语言基础s",content:"init函数\ngo语言中有一个特殊的函数，init函数，这个init函数是go编译器自动识别的，用于一些初始化的工作，init函数\ninit函数常见的使用场景\r#\r\r定义一个全局变量\r当我们在使用数据库或日志函数的时候，经常需要定义一个全局变量来进行初始化\n定义一个全局变量\r#\r\r除了前面我们提到的，我们可以使用init函数来执行一些列的初始化操作，完成一系列的初始化任务，\n1.同一个包中的init函数\n当同一个包中需要一个实例化的变量的时候\r2.引入一个公共包中的init函数的时候\n公共的包中需要定义一个\r"}),a.add({id:19,href:'/2.%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95%E5%92%8C%E6%8E%A5%E5%8F%A3/1.%E5%87%BD%E6%95%B0/',title:"1.函数",section:"2.函数,方法和接口s",content:"一. 函数\r#\r\r二.函数传参\r#\r\rgo语言中函数传参有三种形式，分别是变量传参，地址指针传参，以及可变参数传参。\n1.变量传参\n2.地址指针传参\r#\r\r地址指针传参套路\n使用地址指针类型的方式传参,形参肯定是地址,而且函数调用的时候传入的实参肯定也是地址,因为只有传入的参数的地址类型，才能获取到这个值进行操作。\r因为\r\u0026amp;T 是一个地址\r*t 是一个具体的值。\rfunc work(t \u0026amp;T){\rs := *t }\r预先将地址传入的方法\ntype S struct { i int } func (p *S) Get() int { return p.i } 3.可变参数\n可变参数，所有的可变参数都是使用slice切片接收的。\nfunc myfunc(args ...int) { for _, v := range args { fmt.Println(v) } } 获取任意类型的可变参数\nfunc MyPrintf(args ...interface{}) { for _, arg := range args { switch arg.(type) { case int: fmt.Println(arg, \u0026#34;is an int value.\u0026#34;) case string: fmt.Println(arg, \u0026#34;is an string value.\u0026#34;) case int64: fmt.Println(arg, \u0026#34;is an int64 value.\u0026#34;) default: fmt.Println(arg, \u0026#34;is an unknown value.\u0026#34;) } } } "}),a.add({id:20,href:'/2.%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95%E5%92%8C%E6%8E%A5%E5%8F%A3/2.%E6%96%B9%E6%B3%95/',title:"2.方法",section:"2.函数,方法和接口s",content:"方法\r#\r\r方法简介\r#\r\rgo语言中的struct结构体类似于面向对象中的类。在面向对象中，除了成员变量还有方法。\n在前面的函数中传参\n方法就是预先定义了接收者的函数。\n方法的一些注意事项\r#\r\r1.方法的所有者\n方法和函数的区别\r#\r\r其实方法本质上就是函数，只不过方法是关联到类型上的，可以通过关联的类型直接调用该实例的方法。\n值类型和指针类型的接收者\r#\r\r"}),a.add({id:21,href:'/2.%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95%E5%92%8C%E6%8E%A5%E5%8F%A3/3.%E6%8E%A5%E5%8F%A3/',title:"3.接口",section:"2.函数,方法和接口s",content:"三. 接口\r#\r\r综上所述，使用方法有上述缺点，因此go语言提出了接口的概念以及go语言提倡面向接口的编程，每个接口都由数个方法组成，接口的定义格式如下：\n空接口\r#\r\r空接口是指没有定义任何方法的接口，因此任意类型都实现了空接口，空接口类型的变量可以存放任意类型的变量。\n空接口的应用\r#\r\r1.空接口作为函数的参数\n使用空接口可以接受任意类型的函数参数\r2.空接口作为map的值\ninterface\n空接口\r非空接口\r#\r\r// runtimeruntime\rtype eface struct {\r_type *_type\rdata unsafe.Pointer\r}\r// 有方法的interface\rtype iface struct {\rtab *itab\rdata unsafe.Pointer\r}\r// src\\runtime\\type.go\rtype itab struct {\rinter *interfacetype\r_type *_type\rlink *itab\rhash uint32\rbad bool\rinhash bool\runused [2]byte\rfun [1]uintptr\r}\r// src\\runtime\\type.go\rtype interfacetype struct {\rtyp _type\rpkgpath name\rmhdr []imethod\r}\r// interface数据类型对应的type\rtype _type struct {\rsize uintptr\rptrdata uintptr\rhash uint32\rtflag tflag\ralign uint8\rfieldalign uint8\rkind uint8\ralg *typeAlg\rgcdata *byte\rstr nameOff\rptrToThis typeOff\r}\r可以看到两种类型的接口在内部的实现都是定义了两个字段的结构体，所以任何一个interface变量都是占用16个byte的内存空间。\n为什么使用接口开发\n1.调用函数的时候,需要引入包\n包名.函数名\n接口类型名:\nGo语言中很多包都有接口，比如io包中提供的\n接口的实现\r#\r\r"}),a.add({id:22,href:'/2.%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95%E5%92%8C%E6%8E%A5%E5%8F%A3/5.%E5%8F%8D%E5%B0%84/',title:"5.反射",section:"2.函数,方法和接口s",content:"反射\r#\r\r反射是什么\r#\r\r反射是指在程序运行期间对程序本身进行访问和修改的能力，\n任何接口值都是由一个具体的类型和具体类型的值两部分组成。go语言中反射的相关功能都是由内置的reflect包提供，任何接口值在反射中都可以理解为由reflect.Type和reflect.Value两部分组成，并且reflect包提供了reflect.TypeOf和reflect.ValueOf两个函数来获取任意对象的Value和Type。\nreflect实现了运行时的反射能力,\ngo语言中，要判断两个值是否相等，一方面要判断他们的类型是否相等，另一方面需要判断他们的值是否相等，只有两者都是相等的，两个变量才是相等的。\n反射应用\r#\r\rreflect.TypeOf\r#\r\rreflect.Type也是一种类型，它是对象的,\n在反射中，每一种反射出来的Type是一个接口，里面又分为好几个字段\n.Kind\n.Name\n.\nreflect.Value\r#\r\rreflect.Value是一种类型，\nreflect.ValueOf\r#\r\r"}),a.add({id:23,href:'/3.%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E5%BA%93/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E7%9A%84%E5%87%BD%E6%95%B0%E5%BA%93/1.%E6%96%87%E4%BB%B6io%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C/',title:"1.文件io读写操作",section:"3.常用内置函数库s",content:"go常用的语言包\n1.[]byte操作\r2.buffer操作\r3.文件操作\r1.os 2.io 3.io/ioutils 4.buffers 最底层的\n1. 使用os包对文件进行操作\r#\r\r2. 文件操作的进一步升级\r#\r\rio软件包\n3. 文件操作的进一步抽象\r#\r\rbuffers\r#\r\r[]byte类型转\nstring类型转\n"}),a.add({id:24,href:'/3.%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E5%BA%93/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E7%9A%84%E5%87%BD%E6%95%B0%E5%BA%93/2.%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/',title:"2.标准输入输出",section:"3.常用内置函数库s",content:"fmt标准库是我们在学习go语言的过程中接触的最早也是使用最频繁的一个函数库了，接下来我们讲解一下fmt函数库中常用的一些函数。\nfmt\r#\r\rfmt包实现了标准的格式化输入和格式化的输出打印。\n格式化输入\r#\r\rfmt.Scan\r#\r\rfmt.Scanf\r#\r\rfmt.Scanf不同于fmt.Scan简单的以空格作为输入数据的分隔符，fmt.Scanf为输入数据指定了具体的输入内容格式，只有按照格式输入数据才会被扫描并存入对应的变量。\n 标准输入\r#\r\r 一系列的函数可以扫描格式化文本\nScan : Scan从标准输入中读取字符串,将成功读取到的字符串保存到指定的变量,以空格或换行为分隔符,换行为停止输入。\rScanln : 从标准输入中读取字符串，并将成功读取到的字符串保存到指定的变量，\rScanf : 从标准输入中读取文本，\r从字符串中输入\nSscan\rSscanln\rSscanf\r从文件中输入\nFscan\rFscanln\rFscanf\r标准输出\r#\r\r Print\rPrintln\rPrintf\rSprint\rSprintln\rSprintf\rFprint\rFprintln\rFprintf\r"}),a.add({id:25,href:'/3.%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E5%BA%93/1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E7%9A%84%E5%87%BD%E6%95%B0%E5%BA%93/3.%E8%8E%B7%E5%8F%96%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/',title:"3.获取命令行参数",section:"3.常用内置函数库s",content:"获取命令行参数有三种方式\n1.os.args[]\n2.flag\n3.corba\n1. os.args[]\r#\r\r2. flag\r#\r\r当我们运行go语言程序的时候，flag包实现了命令行参数的解析，当开始使用flag包的时候，需要将\ntype Flag struct { Name string // flag在命令行中的名字  Usage string // 帮助信息  Value Value // 要设置的值  DefValue string // 默认值（文本格式），用于使用信息 } import \u0026quot;flag\u0026quot;\r// 等所有的flag都注册完了以后,需要\rflag.Parse()\r接收int类型信息:\n3.命令行库corba\r#\r\rgithub地址:\nhttps://github.com/spf13/cobra\r"}),a.add({id:26,href:'/3.%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E5%BA%93/2.%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9A%84%E5%87%BD%E6%95%B0%E5%BA%93/1.%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/1.%E8%AF%B7%E6%B1%82%E5%87%BD%E6%95%B0%E7%AE%80%E4%BB%8B/',title:"1.请求函数简介",section:"3.常用内置函数库s",content:"使用go语言发送http请求\r#\r\r常用的有GET,POST,PUT,DELETE,PATCH等操作\n1.request 2.header 3.url 4.body 5.初始化一个client 6.发送网络请求 7.解析结果 1.创建并封装一个request对象\r#\r\r1.1 Request对象简介和分析\r#\r\rrequest是一个结构体对象，它不仅在client请求端使用，有时候也需要在服务端使用。 1.2 创建一个Request结构体对象\r#\r\rfunc NewRequest(method, urlStr string, body io.Reader) (*Request, error)\r参数详解:\rmethod可以是http请求的任何方法，比如：GET,POST,PUT,DELET,PATCH,HEAD等方法。\rurl是一个请求路径:\rbody,如果body参数实现了io.Closer接口，Request返回值的Body 字段会被设置为body，并会被Client类型的Do、Post和PostFOrm方法以及Transport.RoundTrip方法关闭。\r此时，我们就创建好一个Request请求对象了，但是一个完整正确的Request对象不仅仅只是实例化就完成了，还必须配置好正确的Header，正确完成的URL请求路径，并且配置好正确的body请求体，至于cookies和sessions的配置是在服务端完成的。等完成Request对象以后，我们就可以把这个request对象发送给服务端了。\n2.配置Request对象的Header，向Request的Header中添加相应的键值对\r#\r\r当我们使用http的NewRequest方法创建好了一个request请求对象以后，就可以正确的配置这个请求对象的Header了，请求对象的Header是一个map对象，map对象的键是string字符串类型，值是string类型的切片，也就是说值可以有多个string值组成。\ntype Header map[string][]string 1.获取Header中的值\nreq.Header.Get(\u0026quot;\u0026quot;)\n2.设置Header中的值\nreq.Header.Set(\u0026quot;\u0026quot;)\n3.添加Header中的值\nreq.Header.Add(\u0026quot;\u0026quot;)\n4.删除Header中的键值对\nreq.Header.Del(\u0026quot;\u0026quot;)\n5.以有限格式写入Header\nreq.Header.Write(\u0026quot;\u0026quot;)\n6.WriteSubset以有线格式将头域写入w。当exclude不为nil时，如果h的键值对的键在exclude中存在且其对应值为真，该键值对就不会被写入w。\nreq.Header.WriteSubset(\u0026quot;\u0026quot;)\n特殊的Header cookies，seesion以及token\r#\r\r用户在输入用户名和密码之后，浏览器将用户名和密码发送给服务器，服务器进行验证，验证通过之后将用户信息加密后封装成Cookie放在请求头中返回给浏览器。浏览器收到服务器返回数据，发现请求头中有一个：Set-Cookie，然后它就把这个Cookie保存起来，下次浏览器再请求服务器的时候，会把Cookie也放在请求头中传给服务器：服务器收到请求后从请求头中拿到cookie，然后解析并到用户信息，说明此用户已登录，Cookie是将数据保存在客户端的。这里我们可以看到，用户信息是保存在Cookie中，也就相当于是保存在浏览器中，那就说用户可以随意修改用户信息，这是一种不安全的策略！强调一点：Cookie无论是服务器发给浏览器还是浏览器发给服务器，都是放在请求头中的\ncookie是指一个放置在一个Request请求对象中，Header中键为Cookie中的值或服务端回复的Header中键为Set-Cookie中的值。\n3.正确配置Request对象的URL\r#\r\r一个URL的基本格式如下： scheme://[userinfo@]host/path[?query][#fragment]  4.正确配置Request对象的body体\r#\r\r5.创建一个client\r#\r\r6.执行网络请求\r#\r\r#\r\r"}),a.add({id:27,href:'/3.%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E5%BA%93/2.%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9A%84%E5%87%BD%E6%95%B0%E5%BA%93/1.%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/2.%E9%80%9A%E7%94%A8%E6%93%8D%E4%BD%9C/',title:"2.通用操作",section:"3.常用内置函数库s",content:"通用网络请求操作\r#\r\r目前GO语言只对GET,POST,POSTFORM,HEAD进行了封装，其他的像PUT，PATCH等操作只能用通用的DO方法进行请求。\n1. 通用的http请求函数使用\r#\r\r1.1 通用的http请求函数分析\r#\r\r1.2 通用的http请求函数封装\r#\r\r1.3 通用的http请求函数使用\r#\r\r"}),a.add({id:28,href:'/3.%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E5%BA%93/2.%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9A%84%E5%87%BD%E6%95%B0%E5%BA%93/1.%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/3.GET%E6%93%8D%E4%BD%9C/',title:"3. Get操作",section:"3.常用内置函数库s",content:"封装一个GET请求\r#\r\r使用通用的方法封装一个GET请求\n通用GET操作\npackage main\rimport (\r\u0026quot;bytes\u0026quot;\r\u0026quot;encoding/json\u0026quot;\r\u0026quot;io\u0026quot;\r\u0026quot;io/ioutil\u0026quot;\r\u0026quot;net/http\u0026quot;\r\u0026quot;time\u0026quot;\r)\r// 发送GET请求\r// url： 请求地址\r// response： 请求返回的内容\rfunc Get(url string) string {\r// 超时时间：5秒\rclient := \u0026amp;http.Client{Timeout: 5 * time.Second}\rresp, err := client.Get(url)\rif err != nil {\rpanic(err)\r}\rdefer resp.Body.Close()\rvar buffer [512]byte\rresult := bytes.NewBuffer(nil)\rfor {\rn, err := resp.Body.Read(buffer[0:])\rresult.Write(buffer[0:n])\rif err != nil \u0026amp;\u0026amp; err == io.EOF {\rbreak\r} else if err != nil {\rpanic(err)\r}\r}\rreturn result.String()\r}\r"}),a.add({id:29,href:'/3.%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E5%BA%93/2.%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9A%84%E5%87%BD%E6%95%B0%E5%BA%93/1.%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/4.POST%E6%93%8D%E4%BD%9C/',title:"4. Post操作",section:"3.常用内置函数库s",content:"使用客户端进行POST请求操作\r#\r\r一. 使用通用方法封装(对于GO语言来说建议使用这种方法,因为节省精力)\r#\r\r1.创建一个request\n2.创建一个client\n3.进行post请求操作\n二. 直接使用封装好的POST (对于GO语言来说不常用,也不建议)\r#\r\r// 发送POST请求\r// url： 请求地址\r// data： POST请求提交的数据\r// contentType： 请求体格式，如：application/json\r// content： 请求放回的内容\rfunc Post(url string, data interface{}, contentType string) string {\r// 超时时间：5秒\rclient := \u0026amp;http.Client{Timeout: 5 * time.Second}\rjsonStr, _ := json.Marshal(data)\rresp, err := client.Post(url, contentType, bytes.NewBuffer(jsonStr))\rif err != nil {\rpanic(err)\r}\rdefer resp.Body.Close()\rresult, _ := ioutil.ReadAll(resp.Body)\rreturn string(result)\r}\r"}),a.add({id:30,href:'/4.go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/1.goroutine%E7%AE%80%E4%BB%8B/',title:"1.Goroutine简介",section:"4.go语言并发控制s",content:"goroutine源码解析\r#\r\r调度相关的数据结构有三个,M(线程)，P(调度器)，G(goroutine)\nsync包控制的\n写法套路\r#\r\rfunc work(){ for{ seletct: case: case: default: case: return } } 必须有一个退出机制，也就是说必须有一个case需要触发return函数。\n"}),a.add({id:31,href:'/4.go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/2.%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E5%A5%97%E8%B7%AF/',title:"2.并发控制套路",section:"4.go语言并发控制s",content:"并发控制套路\r#\r\r并发的目的是实现我们想要的功能\n1.单纯的并发，也是最原始的并发，单纯的只是执行一定数量的函数\r#\r\r概述: 实现原理和思路\n实现函数func work()\n调用方式\n2.不限定并发的次数，但是多个函数调用的情况，sync包实现\n3.长期监听，但是满足一定的条件才能执行\n4.通过context函数控制work函数的执行。\n"}),a.add({id:32,href:'/4.go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/4.channel%E5%B9%B6%E5%8F%91/',title:"4.Channel并发",section:"4.go语言并发控制s",content:"date: \u0026quot;2015-10-25 T 08:36:54-07:00\u0026quot; title: \u0026quot;channel并发\u0026quot; draft: false\rchannel并发\r#\r\r通道(channel)是go语言中的一个核心类型，是用来传递数据的一个数据结构，通过它\nchannel是一种指针类型的数据结构，通过make来分配内存。\nch := make(chan int) channel\r#\r\rch \u0026lt;- v\r读取channel中的值\r#\r\r循环遍历channel\n使用for \u0026hellip; range语句可以循环遍历channel中的值：\nselect取值\ntimeout超时处理\nselect有一个很重要的作用就是超时处理,\nTimer和Ticker\r#\r\r5. close关闭channel\r#\r\r6. channel同步\r#\r\rchannel可以处理\nchannel常见的使用方法\r#\r\r1. 单个channel，一个函数用来写，一个函数用来读\r#\r\r2.多个channel\r#\r\r\rfor{\r}\r3.select语句\r#\r\r"}),a.add({id:33,href:'/4.go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/5.context%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/',title:"5.Context并发控制",section:"4.go语言并发控制s",content:"context上下文\r#\r\r为什么需要使用context，及context的结构\r#\r\r对于服务器传入的请求需要创建上下文，\nBackground()\nTODO()\ncontext接口分析\n根context\r#\r\r获取一个根context有两种方式，分别是调用调用context包中的background()方法和调用todo()方法。\n子context\r#\r\r子context有四种，分别是\n他们都是使用context包的四个with函数来获取的，\n带有cancel函数的子context\r#\r\rWithCancel\n2. 带有deadline函数的子context\r#\r\r2.1源码分析\r#\r\r// func WithDeadline(parent Context, d time.Time) (Context, CancelFunc) 1.带有deadline函数的子context是使用context包的WithDeadline()函数来获取的\n2.\n3.\n调用如下\n流程分析\n取消结束\n3. 带有timeout函数的子context\r#\r\r// func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc) { return WithDeadline(parent, time.Now().Add(timeout)) } 1.context包的WithTimeout()函数接收一个\n4. 带有value函数的子context\r#\r\rWithValue\n"}),a.add({id:34,href:'/5.%E5%B8%B8%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A8%A1%E5%9D%97/1.-%E6%97%A5%E5%BF%97/1.log/',title:"1.Log",section:"5.常用第三方模块s",content:"go语言标准日志库log\r#\r\rgo语言内置的log包实现了简单的日志服务，使用go语言原生的log日志函数，最大的优点就是使用非常简单，我们可以设置任何io.Writer作为日志记录输出并向其发送任何想要发送的日志数据。\nlog包定义了logger类型的结构体，可以通过调用该实例的，主要提供了3种接口，分别是\u0026quot;Print\u0026quot;,\n\u0026ldquo;Panic\u0026rdquo;,\u0026ldquo;Fatal\u0026rdquo;，对于每一种接口，都提供了三种调用方式，分别是\u0026quot;Print\u0026quot;,\u0026ldquo;Printf\u0026rdquo;,\u0026ldquo;Println\u0026quot;打印，基本和fmt中的\n函数类似。\n基本用法\r#\r\r Print级别的日志，(log.Print|log.Printf|log.Println) : 打印日志，和fmt包每什么区别，只是前面加上了日志的格式。 Fatal级别的日志，(log.Fatal|log.Fatalf|log.Fatalln) ：  Fatal系列\nlog\r#\r\r配置logger\n默认情况下logger只会提供日志的时间信息，但是很多情况下，我们为了，记录日志的文件名和行号等。\nlog标准库中的Flags函数\nlog标准库提供了如下的flag选项，他们是一系列定义好的常量\n原生log日志库的配置\r#\r\r默认情况下，go的原生log日志只会增加打印日志的日期和时间信息，但是很多情况下，为了更好的分析应用程序，增加日志的可读性，我们经常需要添加一些额外的其他信息，比如日志的文件名和行号等。log原生日志库为我们提供了这些设置的方法。\n1. 配置日志的打印信息\r#\r\rfunc SetFlags(flag int)\rfunc Flags() int\rlog标准日志库为我们提供了如下一些现有的配置选项\nLdate: 增加打印日期，格式： 2009/01/23\rLtime: 增加打印时间，格式： 01:23:23\rLmicroseconds Llongfile Lshortfile\rLUTC: 使用UTC时间\rLstdFlags\r一般来说，我们使用这些\n2. 配置日志的前缀\r#\r\r我们可以使用调用log.SetPrefix()函数来\nfunc SetPrefix(prefix string)\rfunc Prefix() string\r3.配置日志的输出位置\r#\r\rfunc SetOutput(w io.Writer)\r4. log实例化并输出日志打印\r#\r\r5. 定义自己的日志框架\r#\r\r通过上面的学习，我们已经知道了，log原生日志的实现是通过调用New()函数创建了一个Logger对象来处理的，那么我们就可以构造不同的Logger对象来处理不同类型的日志即可，下面是一个简单的例子：\n总结\n通过上面的学习，我们已经了解并掌握了go语言中原生log日志库的使用方法，从上面的学习中，我们可以了解到\ngo语言原生日志库的使用优点是非常简单。\n缺点:\n仅限于最基本的日志级别\n不支持INFO/DEBUG等日志级别。\n"}),a.add({id:35,href:'/5.%E5%B8%B8%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A8%A1%E5%9D%97/1.-%E6%97%A5%E5%BF%97/2.zap/',title:"2.Zap",section:"5.常用第三方模块s",content:"zap日志库\n前面我们已经介绍了go语言中原生log日志函数库的使用，正常情况下，我们不会使用go语言的原生日志函数，而是使用第三方的日志函数库。\n使用\r#\r\rzap提供了两种类型的日志记录器，传统的日志记录器Logger和Sugared Logger，在每一微妙和每一次内存分配都很重要的上下文中，使用Logger,他比Sugared Logger更快，内存分配次数更少也更节约内存空间，但它只支持强类型的结构化日志记录。\n1. 传统的logger记录器\r#\r\r1.1声明一个logger\r#\r\r我们可以使用zap.NewDevelopment()/zap.NewProduction()或着zap.NewExample创建一个logger,返回的是一个*zap.Logger的指针对象。 使用logger可以调用 默认情况下所有的日志都会输出打印到程序的console界面。 日志记录器的语法格式是这样的: func (log *Logger) MethodXXX(msg string,fields ... Field) 将日志写入文件\n默认情况下，zap是将日志输出到控制台终端，正常情况下，我们需要将日志写入到文件\nfunc New(core zapcore.Core, options ...Option) *Logger func NewCore(enc Encoder, ws WriteSyncer, enab LevelEnabler) Core\rzapcore.Core需要使用三个配置 --- Encoder,WriteSyncer,LogLevel\r1.Encoder:编码器,如何写入日志的,我们将使用开箱即用的\rzapcore.NewJSONEncoder(zap.NewDevelopmentEncoderConfig())\r2.WriterSyncer: 指定日志将写入到哪里去,\rfile,\r2. Sugared Logger\r#\r\r我们也可以使用Sugared Logger来实现相同的功能。\nSugared Logger和传统的logger大部分的实现基本相同，唯一的区别是\n3. 定制一个我们想要的logger函数\r#\r\r前面我们已经介绍了传统的logger函数的使用方法，此时生成的logger是使用默认的zap函数创建的，但是很多情况下，我们不能使用默认的zap函数创建的logger，我们需要根据自己的实际情况定制一个属于我们自己的logger函数，比如，我们需要把日志输出到特定的文件，而不是打印到应用程序控制台。\n使用\r1.定义日志输出的文件\r2.定义日志的编码格式\r3.定义日志的输出级别\r4.定义日志的前缀时间格式\r5.定义日志的切割\r定制logger: 1.WriterSyncer定义日志输出的文件: func getLogWriter() zapcore.WriteSyncer { file,_ := os.Create(\u0026#34;./app.log\u0026#34;) writeSyncer := zapcore.AddSync(file) return writeSyncer } 2.定义日志的编码方式,zap目前支持两种日志格式: 定义text形式的日志输出格式: zapcore.NewConsoleEncoder(zap.NewProductionEncoderConfig()) 定义json形式的日志输出格式: zapcore.NewJSONEncoder(zap.NewProductionEncoderConfig()) 3.定义日志的输出级别 使用自定义的\n使用自定义格式的shuger的log只需要:\rsugarLogger = logger.Sugar()\r调用我们定义好的logger\r#\r\r前面我们已经把定义好了 1.如果是在同一个包下 2.在不同的包下 log := utils.Logger 日志切割\r#\r\r前面我们已经，但是缺少日志切割功能\n安装Lumberjack:\r#\r\r执行如下命令安装Lumberjack:\rgo get -u github.com/natefinch/lumberjack\r在程序代码中引入:\r#\r\r\r最终如下:\r#\r\r//定义日志的输出文件 func getLogWriter() zapcore.WriteSyncer { lumberJackLogger := \u0026amp;lumberjack.Logger{ Filename: \u0026#34;./app.log\u0026#34;, MaxSize: 20, MaxBackups: 5, MaxAge: 30, Compress: false, } writeSyncer := zapcore.AddSync(lumberJackLogger) return writeSyncer } 三. 使用zap接收gin框架默认的日志\r#\r\r前面我们已经把日志的调用，当我们请求gin框架的时候,\n"}),a.add({id:36,href:'/5.%E5%B8%B8%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A8%A1%E5%9D%97/2.-swagger/1.swagger%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/',title:"1.Swagger安装与使用",section:"5.常用第三方模块s",content:"生成swageer文档\r#\r\r官方文档:\nhttps://github.com/swaggo/swag/blob/master/README.md 1. 首先下载swag命令\rgo get -u github.com/swaggo/swag/cmd/swag\r下载完成后将$GOPATH/bin/添加到Path环境变量,此时会在GOPATH下的bin目录下生成一个swag.exe文件，\r把$GOPATH/bin/添加到Path环境变量才能调用swag命令,然后在项目的根目录下执行swag命令,也就是说\r项目的main.go函数的相同目录下执行命令:\rswag init\r2.此时会在根目录下生成docs目录,内含三个文件:\rdocs.go\rswagger.json\rswagger.yam\r3.下载gin-swagger软件包\rgo get -u github.com/swaggo/gin-swagger\rgo get -u github.com/swaggo/files\r4.然后在项目中引入swagger软件包,并导入新生成的docs目录\rimport (\rswaggerFiles \u0026quot;github.com/swaggo/files\u0026quot;\rginSwagger \u0026quot;github.com/swaggo/gin-swagger\u0026quot;\r_ \u0026quot;github/fengjunhua/cronjobs/docs\u0026quot;\r)\rurl := ginSwagger.URL(\u0026quot;http://localhost:8090/swagger/doc.json\u0026quot;)\rrouter.GET(\u0026quot;/swagger/*any\u0026quot;, ginSwagger.WrapHandler(swaggerFiles.Handler,url))\r5.重新生成swagger文档,并本地访问\rswag init\rhttp://localhost:8090/swagger/index.html\rswag命令详解\r#\r\r"}),a.add({id:37,href:'/5.%E5%B8%B8%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A8%A1%E5%9D%97/2.-swagger/2.main%E5%87%BD%E6%95%B0%E9%85%8D%E7%BD%AE%E5%92%8C%E5%AE%9A%E4%B9%89/',title:"2.Main函数配置和定义",section:"5.常用第三方模块s",content:"swagger详情页的配置\r#\r\r当我们打开swagger界面时，swagger首先会对整个界面做一个描述，这个也称为swagger的详情页，swagger的详情页是在main函数中配置和定义的。\n   annotation 描述 举例     title Required. The title of the application. // @title Swagger Example API   version Required. Provides the version of the application API. // @version 1.0   description A short description of the application. // @description This is a sample server celler server.   tag.name Name of a tag. // @tag.name This is the name of the tag   tag.description Description of the tag // @tag.description Cool Description   tag.docs.url Url of the external Documentation of the tag // @tag.docs.url https://example.com   tag.docs.description Description of the external Documentation of the tag // @tag.docs.description Best example documentation   termsOfService The Terms of Service for the API. // @termsOfService http://swagger.io/terms/   contact.name The contact information for the exposed API. // @contact.name API Support   contact.url The URL pointing to the contact information. MUST be in the format of a URL. // @contact.url http://www.swagger.io/support   contact.email The email address of the contact person/organization. MUST be in the format of an email address. // @contact.email support@swagger.io   license.name Required. The license name used for the API. // @license.name Apache 2.0   license.url A URL to the license used for the API. MUST be in the format of a URL. // @license.url http://www.apache.org/licenses/LICENSE-2.0.html   host The host (name or ip) serving the API. // @host localhost:8080   BasePath The base path on which the API is served. // @BasePath /api/v1   query.collection.format The default collection(array) param format in query,enums:csv,multi,pipes,tsv,ssv. If not set, csv is the default. // @query.collection.format multi   schemes The transfer protocol for the operation that separated by spaces. // @schemes http https   x-name The extension key, must be start by x- and take only json value // @x-example-key {\u0026ldquo;key\u0026rdquo;: \u0026ldquo;value\u0026rdquo;}    Using markdown descriptions\r#\r\rWhen a short string in your documentation is insufficient, or you need images, code examples and things like that you may want to use markdown descriptions. In order to use markdown descriptions use the following annotations.\n   annotation description example     Title Required. The title of the application. // @title Swagger Example API   version Required. Provides the version of the application API. // @version 1.0   description.markdown A short description of the application. Parsed from the api.md file. This is an alternative to @description // @description.markdown No value needed, this parses the description from api.md   tag.name Name of a tag. // @tag.name This is the name of the tag   tag.description.markdown Description of the tag this is an alternative to tag.description. The description will be read from a file named like tagname.md // @tag.description.markdown       变量 是否必须的 变量含义 举例     Title 必须的 整个应用项目的名称 // @title Swagger Example API   version 必须的 项目API的版本 // @version 1.0   description  项目应用程序的简短的说明 // @description This is a sample server celler server.   tag.name  Name of a tag. // @tag.name This is the name of the tag   tag.description  Description of the tag // @tag.description Cool Description   tag.docs.url  Url of the external Documentation of the tag // @tag.docs.url https://example.com   tag.docs.description  Description of the external Documentation of the tag // @tag.docs.description Best example documentation   termsOfService  The Terms of Service for the API. // @termsOfService http://swagger.io/terms/   contact.name  The contact information for the exposed API. // @contact.name API Support   contact.url  The URL pointing to the contact information. MUST be in the format of a URL. // @contact.url http://www.swagger.io/support   contact.email  The email address of the contact person/organization. MUST be in the format of an email address. // @contact.email support@swagger.io   license.name 必须的 该应用程序的api所使用的license协议名称 // @license.name Apache 2.0   license.url  A URL to the license used for the API. MUST be in the format of a URL. // @license.url http://www.apache.org/licenses/LICENSE-2.0.html   host  The host (name or ip) serving the API. // @host localhost:8080   BasePath  The base path on which the API is served. // @BasePath /api/v1   query.collection.format  The default collection(array) param format in query,enums:csv,multi,pipes,tsv,ssv. If not set, csv is the default. // @query.collection.format multi   schemes D The transfer protocol for the operation that separated by spaces. // @schemes http https   x-name D The extension key, must be start by x- and take only json value // @x-example-key {\u0026ldquo;key\u0026rdquo;: \u0026ldquo;value\u0026rdquo;}    TAG相关\nTag.name main函数的标签名称\rTag.description main函数的描述\rTag.docs.url\rTag.docs.description\rcontact相关\ncontact.name 联系人\rcontact.url 联系人跳转的ULR\rcontact.email 联系人的邮箱\rlisence证书相关\nlicense.name\rlicense.url\rquery.collection.format\n使用markdown来进行标记描述\nmain函数定义\r#\r\r// @title 定时任务管理系统 // @version 1.0 // @description 定时任务管理系统后端API接口文档 // @contact.name API Support // @contact.url http://www.swagger.io/support // @license.name Apache 2.0 // @license.url http://www.apache.org/licenses/LICENSE-2.0.html // @host 127.0.0.1:8090 // @BasePath /api/v1 "}),a.add({id:38,href:'/5.%E5%B8%B8%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A8%A1%E5%9D%97/2.-swagger/3.controller%E5%87%BD%E6%95%B0%E9%85%8D%E7%BD%AE/',title:"3.Controller函数配置",section:"5.常用第三方模块s",content:"单个api相关的注解\n   标记符号 描述     tags 每个api所属的大标签列表,可以有多个大标签,每个标签用逗号分隔。   summary 该api所操作的简短的说明,系统会将summary与router会自动结合起来   description A verbose explanation of the operation behavior.   description.markdown A short description of the application. The description will be read from a file named like endpointname.md   id A unique string used to identify the operation. Must be unique among all API operations.   accept A list of MIME types the APIs can consume. Value MUST be as described under Mime Types.   produce A list of MIME types the APIs can produce. Value MUST be as described under Mime Types.   security \rSecurity to each API operation.   header Header in response that separated by spaces. return code,{param type},data type,comment   x-name The extension key, must be start by x- and take only json value.   x-codeSample Optional Markdown usage. take file as parameter. This will then search for a file named like the summary in the given folder.   deprecated Mark endpoint as deprecated.   param 请求参数，Parameters that separated by spaces. param name,param type,data type,is mandatory?,comment attribute(optional)   response 请求所返回的数据，跟success和failure相同。   success Success response that separated by spaces. return code or default,{param type},data type,comment 请求成功所返回的数据   failure Failure response that separated by spaces. return code or default,{param type},data type,comment 请求失败所返回的数据   router 请求的路径URL，配置格式是路径加方法，路径和方法用空格隔开。path,[httpMethod]    Mime Types\r#\r\rswag可以接受所有只要是正确格式的的MIME Types类型,也就是说可以接受匹配*/*的任意类型。 此外，swag还可以接收一些可以设置别名的MIME Types类型的数据，这些可以设置别名的MIME Types类型如下所示。\n   Alias MIME Type     json application/json   xml text/xml   plain text/plain   html text/html   mpfd multipart/form-data   x-www-form-urlencoded application/x-www-form-urlencoded   json-api application/vnd.api+json   json-stream application/x-json-stream   octet-stream application/octet-stream   png image/png   jpeg image/jpeg   gif image/gif    配置请求参数param\r#\r\r1.参数类型Param Type\r#\r\r   请求参数类型 注释     path 路径参数   query 查询参数   header 请求头参数   body 请求体参数   formData 请求form内的参数    2.数据类型Data Type\r#\r\r   参数数据类型 注释     string (string)    integer (int, uint, uint32, uint64)    number (float32)    boolean (bool)    user defined struct     3.配置举例\r#\r\r1.配置path路径中的请求参数 //@Param id path int true \u0026#34;ID\u0026#34;  2.配置query查询参数 //@Param  3.配置header中的参数 //@Param  4.请求体body中的参数 //@Param  5.配置form表单中的参数 //@Param  配置返回参数\r#\r\r与返回相关的参数: response,success,failure\nresponse: 与success成功和failure失败的配置一样。 success: 成功返回的数据结构，由空格分隔的成功响应，返回状态码code或default的 failure: 失败返回的数据结构，由空格分隔的失败响应，返回状态码code或default的 controller函数配置和定义 相应的API接口定义\r#\r\r// @Tags 用户信息 //swagger API分类标签, 同一个tag为一组\r// @Summary 接口概要说明\r// @Description 接口详细描述信息\r// @accept json //浏览器可处理数据类型，浏览器默认发 Accept: */*\r// @Produce json //设置返回数据的类型和编码\r// @Param id path int true \u0026quot;ID\u0026quot; //url参数：（name；参数类型[query(?id=),path(/123)]；数据类型；required；参数描述）\r// @Param name query string false \u0026quot;name\u0026quot;\r// @Success 200 {object} Res {\u0026quot;code\u0026quot;:200,\u0026quot;data\u0026quot;:null,\u0026quot;msg\u0026quot;:\u0026quot;\u0026quot;} //成功返回的数据结构， 最后是示例\r// @Failure 400 {object} Res {\u0026quot;code\u0026quot;:200,\u0026quot;data\u0026quot;:null,\u0026quot;msg\u0026quot;:\u0026quot;\u0026quot;}\r// @Router /test/{id} [get] //路由信息,以及路由请求方法,一定要写上\r#\r\r#\r\r常见的参数举例：\n2.定义请求的参数\r#\r\r常见的请求的参数有path路径参数，query查询参数，header请求头参数，body请求体参数，formData请求的form表单中的参数。\n//@\rrouter路径配置\r#\r\r[\u0026#39;get\u0026#39;, \u0026#39;post\u0026#39;, \u0026#39;put\u0026#39;, \u0026#39;delete\u0026#39;, \u0026#39;patch\u0026#39;] "}),a.add({id:39,href:'/5.%E5%B8%B8%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A8%A1%E5%9D%97/3.-casbin/',title:"3. Casbin",section:"5.常用第三方模块s",content:"weight: 1\rbookFlatSection: true\rbookCollapseSection: true\rtitle: \u0026quot;casbin\u0026quot;\rcasbin访问控制框架入门\n应用系统中的权限管理是指区分不同用户对不同资源的访问能力,也称之为访问控制。\n在做任何多用户的系统的时候，用户的权限管理都是整个系统中不可缺少的一部分，并且权限设计的模型必须做到既清晰又安全。\n"}),a.add({id:40,href:'/5.%E5%B8%B8%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A8%A1%E5%9D%97/5.-%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8F%82%E6%95%B0/1.viper/',title:"1.Viper",section:"5.常用第三方模块s",content:"go语言配置管理神器 \u0026ndash; Viper\r#\r\r读取配置文件\r#\r\rviper仅需要一个很少的配置,因为viper也需要知道配置从哪里读取配置文件，viper支持JSON，TOML,YAML,HCL,INI,envfile以及Java类型的配置文件。viper可以搜索多个路径，但是目前一个viper实例只能支持一个配置文件，viper //viper设置配置文件的名称 viper.SetConfigName(\u0026#34;config\u0026#34;) //viper设置配置文件的类型 viper.SetConfigType(\u0026#34;yaml\u0026#34;) //viper设置配置文件所在的路径 viper.AddConfigPath(\u0026#34;/etc/appname/\u0026#34;) viper.AddConfigPath(\u0026#34;$HOME/.appname\u0026#34;) viper.AddConfigPath(\u0026#34;.\u0026#34;) //viper读取配置文件 err := viper.ReadInConfig() if err != nil { // Handle errors reading the config file 	panic(fmt.Errorf(\u0026#34;Fatal error config file: %w \\n\u0026#34;, err)) } "}),a.add({id:41,href:'/6.-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/',title:"1.数据结构和算法",section:"6. 数据结构和算法s",content:"数据结构\r#\r\r链表\r#\r\r栈和队列\r#\r\r列表\r#\r\r字典\r#\r\r树\r#\r\r排序算法\r#\r\r在计算机开发语言中，只要一提到排序算法，肯定是对切片的数值类型的数据进行排序，因为别的数据类型根本没有排序算法一说。\n选择排序\r#\r\r冒泡排序\r#\r\r插入排序\r#\r\r希尔排序\r#\r\r快速排序\r#\r\r"}),a.add({id:42,href:'/7.-etcd%E6%95%B0%E6%8D%AE%E5%BA%93/2.watcher/',title:"2.Watcher",section:"7. etcd数据库s",content:"watch机制\r#\r\rwatch是mvcc包中的一个功能，watch可以监听一个或一组key，key的任何变化都会发出消息，使用watch机制\n可以实现消息的发布和订阅模式。\n首先介绍几个对象:\n1. Event\r事件,变更的消息是以Event的形式发送出去的,Event包括操作的类型,\rkey,value等。\r2.watcher\rwatcher监听一个或一组key,如果有变更,watcher会将变更的内容通过chan发送出去。\rwatcher := client.Watch(context.Background(),\u0026quot;test\u0026quot;)\r返回的是一个channel,存储的是WatchResponse\rtype WatchChan \u0026lt;-chan WatchResponse\r可以通过range循环,WatchResponse\r3.watcherGroup\r顾名思义,表示一组watcher,watcherGroup管理多个watcher，能够根据key快速找到监听该key的一个或多个watcher。\r4.wathableStore\r5.watchStream\rtype WatchResponse struct { Header pb.ResponseHeader Events []*Event CompactRevision int64 Canceled bool Created bool closeErr error cancelReason string } 1. 2. Events []*Event Events是一个列表 type Event mvccpb.Event 举例说明:\n"}),a.add({id:43,href:'/7.-etcd%E6%95%B0%E6%8D%AE%E5%BA%93/4.%E6%95%B0%E6%8D%AE/',title:"4.数据",section:"7. etcd数据库s",content:"KeyValue:\ncreate_revision: 创建的次数\nmod_revision：修改的次数\nversion: 此key修改的次数\n"}),a.add({id:44,href:'/7.-go-rpc/1.protobuf%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/',title:"1.Protobuf配置和使用",section:"7. go rpcs",content:"安装并配置protobuf命令\r#\r\r1.下载客户端命令:\r#\r\rhttps://github.com/protocolbuffers/protobuf/releases\n将下载后的\n放到\n输入protoc命令，即标识protoc命令已经安装完成。\n2.下载安装go语言可以调用protobuf命令的库\ngo get github.com/golang/protobuf/protoc-gen-go 3.编写一个文件\nhttps://developers.google.cn/protocol-buffers/docs/proto3\n定义一个消息类型\n"}),a.add({id:45,href:'/7.-go-rpc/2.go-rpc%E7%AE%80%E4%BB%8B/',title:"2.Go Rpc简介",section:"7. go rpcs",content:"golang官方本身提供了rpc库，还有许多第三方库为golang提供了rpc支持，大部分第三方rpc库的实现都是通过protobuf进行数据编码，根据protobuf声明文件自动生成rpc方法定义与服务注册代码，在golang可以很方便的进行rpc服务调用。\ngo语言自身的net/rpc库\r#\r\r"}),a.add({id:46,href:'/8.-mysql%E6%95%B0%E6%8D%AE%E5%BA%93/1.%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%9D%E5%A7%8B%E5%8C%96/',title:"1.数据库初始化",section:"8. mysql数据库s",content:"连接msyql\n1.gorm驱动包的选择\n官网地址：https://github.com/go-gorm/gorm.git\n官方：https://gorm.io/\nimport (\r\u0026quot;github.com/jinzhu/gorm\u0026quot;\r_ \u0026quot;github.com/go-sql-driver/mysql\u0026quot;\r)\r或者是:\rimport (\r\u0026quot;github.com/jinzhu/gorm\u0026quot;\r_ \u0026quot;github.com/jinzhu/gorm/dialects/mysql\u0026quot;\r)\r注:github.com/go-sql-driver/mysql和github.com/jinzhu/gorm/dialects/mysql都为go连接mysql的驱动包,\r这两个使用哪个都可以,但必须使用一个。\r数据库连接池:\rgorm使用database/sql软件包来配置和维护数据库连接池\rimport (\r_ \u0026quot;gorm.io/driver/mysql\u0026quot;\r\u0026quot;gorm.io/gorm\u0026quot;\r)\rimport (\r_ \u0026quot;github.com/go-gorm/mysql\u0026quot;\r\u0026quot;github.com/go-gorm/gorm\u0026quot;\r)\r此时返回的是一个数据库的\n本地创建struct与表的关联\n因为前面已经创建了表关联，因此所有的对struct结构体的操作都会映射到相应的表结构上去，拥有的方法如下:\nCreate\r"}),a.add({id:47,href:'/8.-mysql%E6%95%B0%E6%8D%AE%E5%BA%93/2.%E5%88%9B%E5%BB%BA%E8%A1%A8%E5%85%B3%E8%81%94/',title:"2.创建表关联",section:"8. mysql数据库s",content:"数据库模型可以使用的字段\n   标签名 标签含义     column 结构体在数据库表中的列名   primaryKey 指定列名是否为主键   unique 指定该列是否唯一   default 指定列的默认值   not null 指定列是否非空                    多个表之间相互关联的标签\r#\r\r多个表之间相互关联的标签\n   标签名 标签含义     foreignKey 指定当前模型的列是否为连接表的外键   references 指定引用表的列名，其将被映射为连接表外键   polymorphic 指定多态类型，比如模型名   polymorphicValue 指定多态值、默认表名   many2many 指定连接表表名   joinForeignKey 指定连接表的外键列名，其将被映射到当前表   joinReferences 指定连接表的外键列名，其将被映射到引用表   constraint 关系约束，例如：OnUpdate、OnDelete    数据库模型的定义:\n定义举例：\n"}),a.add({id:48,href:'/8.-mysql%E6%95%B0%E6%8D%AE%E5%BA%93/3.%E8%A1%A8%E6%93%8D%E4%BD%9C/',title:"3.表操作",section:"8. mysql数据库s",content:"由于前面已经创建了\n增加操作\r#\r\r更新\n批量添加记录\n删除操作\r#\r\r改操作\r#\r\r查询操作\r#\r\r"}),a.add({id:49,href:'/9.gin%E6%A1%86%E6%9E%B6/1.%E8%8E%B7%E5%8F%96%E8%B7%AF%E5%BE%84%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0/1.%E8%8E%B7%E5%8F%96%E8%B7%AF%E5%BE%84%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0/',title:"1.获取路径中的参数",section:"9.gin框架s",content:"c.Param.Get(\u0026#34;name\u0026#34;) "}),a.add({id:50,href:'/go/example/collapsed/3rd-level/4th-level/',title:"4th Level",section:"3rd Level",content:"4th Level of Menu\r#\r\rCaesorum illa tu sentit micat vestes papyriferi\r#\r\rInde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"}),a.add({id:51,href:'/go/example/collapsed/3rd-level/',title:"3rd Level",section:"Collapsed",content:"3rd Level of Menu\r#\r\rNefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral),\rnorthbridge_services_troubleshooting, personal(\rfirmware_rw.trash_rw_crm.device(interactive_gopher_personal,\rsoftware, -1), megabit, ergonomicsSoftware(cmyk_usb_panel,\rmips_whitelist_duplex, cpa)));\rif (5) {\rmanagementNetwork += dma - boolean;\rkilohertz_token = 2;\rhoneypot_affiliate_ergonomics = fiber;\r}\rmouseNorthbridge = byte(nybble_xmp_modem.horse_subnet(\ranalogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet),\rgateway_ospf), repository.domain_key.mouse(serverData(fileNetwork,\rtrim_duplex_file), cellTapeDirect, token_tooltip_mashup(\rripcordingMashup)));\rmodule_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) +\rcoreLog.joystick(componentUdpLink), windows_expansion_touchscreen);\rbashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling(\rciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);\r "}),a.add({id:52,href:'/go/example/hidden/',title:"Hidden",section:"go语言基础教程",content:"This page is hidden in menu\r#\r\rQuondam non pater est dignior ille Eurotas\r#\r\rLatent te facies\r#\r\rLorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\n Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor  Cum honorum Latona\r#\r\rO fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer),\rpad.property_data_programming.sectorBrowserPpga(dataMask, 37,\rrecycleRup));\rintellectualVaporwareUser += -5 * 4;\rtraceroute_key_upnp /= lag_optical(android.smb(thyristorTftp));\rsurge_host_golden = mca_compact_device(dual_dpi_opengl, 33,\rcommerce_add_ppc);\rif (lun_ipv) {\rverticalExtranet(1, thumbnail_ttl, 3);\rbar_graphics_jpeg(chipset - sector_xmp_beta);\r}\r Fronde cetera dextrae sequens pennis voce muneris\r#\r\rActa cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software;\rif (internic \u0026gt; disk) {\remoticonLockCron += 37 + bps - 4;\rwan_ansi_honeypot.cardGigaflops = artificialStorageCgi;\rsimplex -= downloadAccess;\r}\rvar volumeHardeningAndroid = pixel + tftp + onProcessorUnmount;\rsector(memory(firewire + interlaced, wired)); "}),a.add({id:53,href:'/go/shortcodes/buttons/',title:"Buttons",section:"Shortcodes",content:"Buttons\r#\r\rButtons are styled links that can lead to local page or external link.\nExample\r#\r\r{{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}} \rGet Home\r\rContribute\r\r"}),a.add({id:54,href:'/go/shortcodes/columns/',title:"Columns",section:"Shortcodes",content:"Columns\r#\r\rColumns help organize shorter pieces of content horizontally for readability.\n{{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}} Example\r#\r\rLeft Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\r\rMid Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!\r\rRight Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\r\r\r"}),a.add({id:55,href:'/go/shortcodes/details/',title:"Details",section:"Shortcodes",content:"Details\r#\r\rDetails shortcode is a helper for details html5 element. It is going to replace expand shortcode.\nExample\r#\r\r{{\u0026lt; details \u0026#34;Title\u0026#34; [open] \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} {{\u0026lt; details title=\u0026#34;Title\u0026#34; open=true \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} Title\rMarkdown content Lorem markdownum insigne\u0026hellip;\r\r\r"}),a.add({id:56,href:'/go/shortcodes/expand/',title:"Expand",section:"Shortcodes",content:"Expand\r#\r\rExpand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.\nExample\r#\r\rDefault\r#\r\r{{\u0026lt; expand \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}} \r\rExpand\r↕\r\rMarkdown content Lorem markdownum insigne\u0026hellip;\r\r\r\rWith Custom Label\r#\r\r{{\u0026lt; expand \u0026#34;Custom Label\u0026#34; \u0026#34;...\u0026#34; \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}} \r\rCustom Label\r...\r\rMarkdown content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\r\r\r\r"}),a.add({id:57,href:'/go/shortcodes/hints/',title:"Hints",section:"Shortcodes",content:"Hints\r#\r\rHint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{\u0026lt; /hint \u0026gt;}} Example\r#\r\rMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\r\rMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\r\rMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\r\r"}),a.add({id:58,href:'/go/shortcodes/katex/',title:"Katex",section:"Shortcodes",content:"KaTeX\r#\r\rKaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample\r#\r\r{{\u0026lt; katex [display] [class=\u0026#34;text-center\u0026#34;] \u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt; /katex \u0026gt;}} \r\r\r\r\\[\rf(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\r\\]\r\r\r\rDisplay Mode Example\r#\r\rHere is some inline example: \r\\(\\pi(x)\\)\r\r, rendered in the same line. And below is display example, having display: block \r\\[\rf(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\r\\]\r\rText continues here.\n"}),a.add({id:59,href:'/go/shortcodes/mermaid/',title:"Mermaid",section:"Shortcodes",content:'Mermaid Chart\r#\r\r\rMermaidJS is library for generating svg charts and diagrams from text.\nOverride Mermaid Initialization Config\nTo override the initialization config for Mermaid, create a mermaid.json file in your assets folder!\n\rExample\r#\r\r{{\u0026lt; mermaid [class=\u0026#34;text-center\u0026#34;]\u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u0026gt; State2 note left of State2 : This is the note to the left. {{\u0026lt; /mermaid \u0026gt;}} \r\r\rmermaid.initialize({\r"flowchart": {\r"useMaxWidth":true\r},\r"theme": "default"\r}\r)\rstateDiagram-v2\rState1: The state with a note\rnote right of State1\rImportant information! You can write\rnotes.\rend note\rState1 -- State2\rnote left of State2 : This is the note to the left.\r\r\r'}),a.add({id:60,href:'/go/shortcodes/section/',title:"Section",section:"Shortcodes",content:"Section\r#\r\rSection renders pages in section as definition list, using title and description.\nExample\r#\r\r{{\u0026lt; section \u0026gt;}} \r\rFirst Page\r\rFirst page\r#\rLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\r\rSecond Page\r\rSecond Page\r#\rLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\r\r"}),a.add({id:61,href:'/go/shortcodes/section/first-page/',title:"First Page",section:"Section",content:"First page\r#\r\rLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n\rDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"}),a.add({id:62,href:'/go/shortcodes/section/second-page/',title:"Second Page",section:"Section",content:"Second Page\r#\r\rLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n\rDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"}),a.add({id:63,href:'/go/shortcodes/tabs/',title:"Tabs",section:"Shortcodes",content:"Tabs\r#\r\rTabs let you organize content by context, for example installation instructions for each supported platform.\n{{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example\r#\r\rMacOS\rMacOS This is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nLinux\rLinux This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nWindows\rWindows This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n\r"}),a.add({id:64,href:'/1.-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/2.%E5%8F%98%E9%87%8F/',title:"first",section:"1. go语言基础s",content:"变量的声明\n"}),a.add({id:65,href:'/go/example/2.%E5%BE%AA%E7%8E%AF/',title:"go循环",section:"go语言基础教程",content:"for循环\r#\r\rgo语言的for循环有3种形式\n 和c的for一样  for{\r}\r for condition{}\n  3.最常用的几种形式\nfor key,value := range map{ } "}),a.add({id:66,href:'/4.go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/3.sync%E4%BA%92%E6%96%A5%E9%94%81/',title:"sync并发",section:"4.go语言并发控制s",content:"sync并发\r#\r\r1. sync.Mutex互斥锁\r#\r\r使用场景: 当应用程序需要对一个\ntype Mutex struct { state int32 sema uint32 } Mutex是一个互斥锁,互斥锁的零值是未锁定的互斥锁, sync.Mutex 使用方法:\n1.第一种情况,当所有的应用程序都调用一个函数对一个进行操作的时候 mutex := \u0026amp;sync.Mutex{} func work() { mutex.Lock() /* 对一个共享变量或者文件,网络等设备的操作,(比如切片,MAP,结构体,指针,文件等操作) */ mutex.Unlock() } 该项目程序中要想对某个共享的变量或者文件操作，只能通过aa函数进行操作,正常情况下，任何函数都可以调用aa,这样就能保证了aa函数每次只能执行一次，因此这种控制方式与其说是对文件进行锁控制，实际上是对该操作函数进行的控制。 2.第二种情况,多个函数都可以对该共享的变量进行操作 func aa(){ } func bb(){ } 2. sync.RWMutex读写互斥锁\r#\r\rsync.RWMutex是一个读写互斥锁，它提供了我们上面的刚刚看到的sync.Mutex的Lock和UnLock方法（因为这两个结构都实现了sync.Locker接口）。但是，它还允许使用RLock和RUnlock方法进行并发读取\nmutex := \u0026amp;sync.RWMutex{} mutex.Lock() // Update 共享变量 mutex.Unlock() mutex.RLock() // Read 共享变量 mutex.RUnlock() 3. sync.WaitGroup等待组\r#\r\r\r4. sync.Map\r#\r\rsync.Map是一个带有锁机制的go语言map,\nm := sync.Map{}\r//添加元素\rm.Store(key,value)\rm.Store(key,value)\r5. sync.Pool\r#\r\r\r6. sync.Once\r#\r\rsync.Once是一个简单而强大的原语，可确保一个函数仅执行一次。在下面的示例中，只有一个goroutine会显示输出消息：\n一.sync.Once是\r#\r\rinit函数是在文件包首次被加载的时候执行，并且只执行一次。\nsync.Once是在代码一开始需要运行的时候执行，并且只执行一次。\n例如:\nonce := \u0026amp;sync.Once{}\rfor i := 0; i \u0026lt; 4; i++ {\ri := i\rgo func() {\ronce.Do(func() {\rfmt.Printf(\u0026quot;first %d\\n\u0026quot;, i)\r})\r}()\r}\r我们使用了once.Do(func ())方法来指定只能被调用一次的部分。\n7. sync.Cond\r#\r\rsync.Cond可能是sync包提供的同步原语中最不常用的一个，它用于发出信号（一对一）或广播信号（一对多）到goroutine。让我们考虑一个场景，我们必须向一个goroutine指示共享切片的第一个元素已更新。创建sync.Cond需要sync.Locker对象（sync.Mutex或sync.RWMutex）：\n"})})()